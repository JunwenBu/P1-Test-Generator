#ifndef GENPROJ_H
#define GENPROJ_H
///////////////////////////////////////////////////////////////////////
// GenProj.h                                                         //              
// ver 1.0                                                           //
// Language:    Visual C++, Visual Studio 2010, SP1                  //
// Application: CSE 687 Project1                                     //
// Reference:   Jim Fawcett's GenProj Demo                           //
// Author:      Junwen Bu                                            //
//
// - This demo then replaces the place holder with an element for a 
//   cpp file and an element for an h file, just to demonstrate how to
//   do that.  At that place you need to insert your code to save 
//   elements for all your cpp files and elements for all your h files.
///////////////////////////////////////////////////////////////////////
/* Package Operations:
* ===================
* This Package contains functions used to generate the project file
* Starts with a template project which is a copy of an appropriate
* project generated by visual studio, with all of the compiled and
* included files replaced with a single dummy placeholder for each.
* 
* Required Files:
* ===============
* FileMgr.h, FileMgr.cpp
* XmlReader.h, XmlRead.cpp
* XmlWriter.h, XmlWriter.cpp
*
* Function Catalog:
* ==========================
* putProjectString
* generateProjectFile
*
* Private Function Catalog:
* ==========================
* readToEnd
* buildCPPsGroup
* buildHsGroup
*/

#include <iostream>
#include <vector>
#include "FileMgr.h"
#include "XmlReader.h"
#include "XmlWriter.h"

class GenProj
{
public:
	// constructor 
	GenProj(std::string name);

	// return a string object storing the content of the .vcxproj file need to be generated
	std::string putProjectString(std::string& templateFile, std::vector<std::string> files);

	// generate .vcxproj file under directory 'path'
	void generateProjectFile(const std::string& path, const std::string& xmlStr);

private:
	// read file content into string
	std::string readToEnd(std::ifstream& in);

	// build stuff about CPP file infomation and insert it into project file
	std::string buildCPPsGroup(std::vector<std::string> Cppfiles);

	// build stuff about H file infomation and insert it into project file
	std::string buildHsGroup(std::vector<std::string> Hfiles);

	// name of project
	std::string projectName;
};

#endif